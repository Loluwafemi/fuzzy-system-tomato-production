{"version":3,"file":"dev.js","sources":["../bin/defaults.ts","../bin/options/logger.ts","../bin/utils/dir.ts","../bin/utils/platform.ts","../bin/utils/info.ts","../bin/options/icon.ts","../bin/utils/url.ts","../bin/options/index.ts","../bin/helpers/tauriConfig.ts","../bin/utils/shell.ts","../bin/utils/ip.ts","../bin/helpers/rust.ts","../bin/utils/combine.ts","../bin/helpers/merge.ts","../bin/builders/BaseBuilder.ts","../bin/builders/MacBuilder.ts","../bin/builders/WinBuilder.ts","../bin/builders/LinuxBuilder.ts","../bin/builders/BuilderProvider.ts","../bin/dev.ts"],"sourcesContent":["import { PakeCliOptions } from './types.js';\n\nexport const DEFAULT_PAKE_OPTIONS: PakeCliOptions = {\n  icon: '',\n  height: 780,\n  width: 1200,\n  fullscreen: false,\n  resizable: true,\n  hideTitleBar: false,\n  alwaysOnTop: false,\n  appVersion: '1.0.0',\n  darkMode: false,\n  disabledWebShortcuts: false,\n  activationShortcut: '',\n  userAgent: '',\n  showSystemTray: false,\n  multiArch: false,\n  targets: 'deb',\n  useLocalFile: false,\n  systemTrayIcon: '',\n  proxyUrl: \"\",\n  debug: false,\n  inject: [],\n  installerLanguage: 'en-US',\n};\n\n// Just for cli development\nexport const DEFAULT_DEV_PAKE_OPTIONS: PakeCliOptions & { url: string } = {\n  ...DEFAULT_PAKE_OPTIONS,\n  url: 'https://weread.qq.com',\n  name: 'WeRead',\n  hideTitleBar: true,\n};\n","import chalk from 'chalk';\nimport log from 'loglevel';\n\nconst logger = {\n  info(...msg: any[]) {\n    log.info(...msg.map(m => chalk.white(m)));\n  },\n  debug(...msg: any[]) {\n    log.debug(...msg);\n  },\n  error(...msg: any[]) {\n    log.error(...msg.map(m => chalk.red(m)));\n  },\n  warn(...msg: any[]) {\n    log.info(...msg.map(m => chalk.yellow(m)));\n  },\n  success(...msg: any[]) {\n    log.info(...msg.map(m => chalk.green(m)));\n  },\n};\n\nexport default logger;\n","import path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Convert the current module URL to a file path\nconst currentModulePath = fileURLToPath(import.meta.url);\n\n// Resolve the parent directory of the current module\nexport const npmDirectory = path.join(path.dirname(currentModulePath), '..');\n\nexport const tauriConfigDirectory =\n  process.env.NODE_ENV === 'development'\n    ? path.join(npmDirectory, 'src-tauri', '.pake')\n    : path.join(npmDirectory, 'src-tauri');\n","const { platform } = process;\n\nexport const IS_MAC = platform === 'darwin';\nexport const IS_WIN = platform === 'win32';\nexport const IS_LINUX = platform === 'linux';\n","import crypto from 'crypto';\nimport prompts from 'prompts';\nimport ora from 'ora';\nimport chalk from 'chalk';\n\n// Generates an identifier based on the given URL.\nexport function getIdentifier(url: string) {\n  const postFixHash = crypto.createHash('md5').update(url).digest('hex').substring(0, 6);\n  return `com.pake.${postFixHash}`;\n}\n\nexport async function promptText(message: string, initial?: string): Promise<string> {\n  const response = await prompts({\n    type: 'text',\n    name: 'content',\n    message,\n    initial,\n  });\n  return response.content;\n}\n\nexport function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function getSpinner(text: string) {\n  const loadingType = {\n    interval: 80,\n    frames: ['✦', '✶', '✺', '✵', '✸', '✹', '✺'],\n  };\n  return ora({\n    text: `${chalk.cyan(text)}\\n`,\n    spinner: loadingType,\n    color: 'cyan',\n  }).start();\n}\n","import path from 'path';\nimport axios from 'axios';\nimport fsExtra from 'fs-extra';\nimport chalk from 'chalk';\nimport { dir } from 'tmp-promise';\n\nimport logger from './logger';\nimport { npmDirectory } from '@/utils/dir';\nimport { IS_LINUX, IS_WIN } from '@/utils/platform';\nimport { getSpinner } from '@/utils/info';\nimport { fileTypeFromBuffer } from 'file-type';\nimport { PakeAppOptions } from '@/types';\n\nexport async function handleIcon(options: PakeAppOptions) {\n  if (options.icon) {\n    if (options.icon.startsWith('http')) {\n      return downloadIcon(options.icon);\n    } else {\n      return path.resolve(options.icon);\n    }\n  } else {\n    logger.warn('✼ No icon given, default in use. For a custom icon, use --icon option.');\n    const iconPath = IS_WIN\n      ? 'src-tauri/png/icon_256.ico'\n      : IS_LINUX\n      ? 'src-tauri/png/icon_512.png'\n      : 'src-tauri/icons/icon.icns';\n    return path.join(npmDirectory, iconPath);\n  }\n}\n\nexport async function downloadIcon(iconUrl: string) {\n  const spinner = getSpinner('Downloading icon...');\n  try {\n    const iconResponse = await axios.get(iconUrl, { responseType: 'arraybuffer' });\n    const iconData = await iconResponse.data;\n\n    if (!iconData) {\n      return null;\n    }\n\n    const fileDetails = await fileTypeFromBuffer(iconData);\n    if (!fileDetails) {\n      return null;\n    }\n\n    const { path: tempPath } = await dir();\n    let iconPath = `${tempPath}/icon.${fileDetails.ext}`;\n    // Fix this for linux\n    if (IS_LINUX) {\n      iconPath = 'png/linux_temp.png';\n      await fsExtra.outputFile(`${npmDirectory}/src-tauri/${iconPath}`, iconData);\n    } else {\n      await fsExtra.outputFile(iconPath, iconData);\n    }\n    await fsExtra.outputFile(iconPath, iconData);\n    spinner.succeed(chalk.green('Icon downloaded successfully!'));\n    return iconPath;\n  } catch (error) {\n    spinner.fail(chalk.red('Icon download failed!'));\n    if (error.response && error.response.status === 404) {\n      return null;\n    }\n    throw error;\n  }\n}\n","import * as psl from 'psl';\nimport isUrl from 'is-url';\n\n// Extracts the domain from a given URL.\nexport function getDomain(inputUrl: string): string | null {\n  try {\n    const url = new URL(inputUrl);\n    // Use PSL to parse domain names.\n    const parsed = psl.parse(url.hostname);\n\n    // If domain is available, split it and return the SLD.\n    if ('domain' in parsed && parsed.domain) {\n      return parsed.domain.split('.')[0];\n    } else {\n      return null;\n    }\n  } catch (error) {\n    return null;\n  }\n}\n\n// Appends 'https://' protocol to the URL if not present.\nexport function appendProtocol(inputUrl: string): string {\n  try {\n    new URL(inputUrl);\n    return inputUrl;\n  } catch {\n    return `https://${inputUrl}`;\n  }\n}\n\n// Normalizes the URL by ensuring it has a protocol and is valid.\nexport function normalizeUrl(urlToNormalize: string): string {\n  const urlWithProtocol = appendProtocol(urlToNormalize);\n\n  if (isUrl(urlWithProtocol)) {\n    return urlWithProtocol;\n  } else {\n    throw new Error(`Your url \"${urlWithProtocol}\" is invalid`);\n  }\n}\n","import fsExtra from 'fs-extra';\nimport logger from '@/options/logger';\n\nimport { handleIcon } from './icon';\nimport { getDomain } from '@/utils/url';\nimport { getIdentifier, promptText, capitalizeFirstLetter } from '@/utils/info';\nimport { PakeAppOptions, PakeCliOptions, PlatformMap } from '@/types';\n\nfunction resolveAppName(name: string, platform: NodeJS.Platform): string {\n  const domain = getDomain(name) || 'pake';\n  return platform !== 'linux' ? capitalizeFirstLetter(domain) : domain;\n}\n\nfunction isValidName(name: string, platform: NodeJS.Platform): boolean {\n  const platformRegexMapping: PlatformMap = {\n    linux: /^[a-z0-9]+(-[a-z0-9]+)*$/,\n    default: /^[a-zA-Z0-9]+([-a-zA-Z0-9])*$/,\n  };\n  const reg = platformRegexMapping[platform] || platformRegexMapping.default;\n  return !!name && reg.test(name);\n}\n\nexport default async function handleOptions(options: PakeCliOptions, url: string): Promise<PakeAppOptions> {\n  const { platform } = process;\n  const isActions = process.env.GITHUB_ACTIONS;\n  let name = options.name;\n\n  const pathExists = await fsExtra.pathExists(url);\n  if (!options.name) {\n    const defaultName = pathExists ? '' : resolveAppName(url, platform);\n    const promptMessage = 'Enter your application name';\n    const namePrompt = await promptText(promptMessage, defaultName);\n    name = namePrompt || defaultName;\n  }\n\n  if (!isValidName(name, platform)) {\n    const LINUX_NAME_ERROR = `✕ name should only include lowercase letters, numbers, and dashes, and must contain at least one lowercase letter. Examples: com-123-xxx, 123pan, pan123, weread, we-read.`;\n    const DEFAULT_NAME_ERROR = `✕ Name should only include letters and numbers, and dashes (dashes must not at the beginning), and must contain at least one letter. Examples: 123pan, 123Pan, Pan123, weread, WeRead, WERead, we-read.`;\n    const errorMsg = platform === 'linux' ? LINUX_NAME_ERROR : DEFAULT_NAME_ERROR;\n    logger.error(errorMsg);\n    if (isActions) {\n      name = resolveAppName(url, platform);\n      logger.warn(`✼ Inside github actions, use the default name: ${name}`);\n    } else {\n      process.exit(1);\n    }\n  }\n\n  const appOptions: PakeAppOptions = {\n    ...options,\n    name,\n    identifier: getIdentifier(url),\n  };\n\n  appOptions.icon = await handleIcon(appOptions);\n\n  return appOptions;\n}\n","import pakeConf from '../../src-tauri/pake.json';\nimport CommonConf from '../../src-tauri/tauri.conf.json';\nimport WinConf from '../../src-tauri/tauri.windows.conf.json';\nimport MacConf from '../../src-tauri/tauri.macos.conf.json';\nimport LinuxConf from '../../src-tauri/tauri.linux.conf.json';\n\nconst platformConfigs = {\n  win32: WinConf,\n  darwin: MacConf,\n  linux: LinuxConf,\n};\n\nconst { platform } = process;\n// @ts-ignore\nconst platformConfig = platformConfigs[platform];\n\nlet tauriConfig = {\n  ...CommonConf,\n  bundle: platformConfig.bundle,\n  app: {\n    ...CommonConf.app,\n    trayIcon: {\n      ...(platformConfig?.app?.trayIcon ?? {}),\n    },\n  },\n  build: CommonConf.build,\n  pake: pakeConf,\n};\n\nexport default tauriConfig;\n","import shelljs from 'shelljs';\nimport { npmDirectory } from './dir';\n\nexport function shellExec(command: string) {\n  return new Promise<number>((resolve, reject) => {\n    shelljs.exec(command, { async: true, silent: false, cwd: npmDirectory }, code => {\n      if (code === 0) {\n        resolve(0);\n      } else {\n        reject(new Error(`Error occurred while executing command \"${command}\". Exit code: ${code}`));\n      }\n    });\n  });\n}\n","import dns from 'dns';\nimport http from 'http';\nimport { promisify } from 'util';\n\nimport logger from '@/options/logger';\n\nconst resolve = promisify(dns.resolve);\n\nconst ping = async (host: string) => {\n  const lookup = promisify(dns.lookup);\n  const ip = await lookup(host);\n  const start = new Date();\n\n  // Prevent timeouts from affecting user experience.\n  const requestPromise = new Promise<number>((resolve, reject) => {\n    const req = http.get(`http://${ip.address}`, res => {\n      const delay = new Date().getTime() - start.getTime();\n      res.resume();\n      resolve(delay);\n    });\n\n    req.on('error', err => {\n      reject(err);\n    });\n  });\n\n  const timeoutPromise = new Promise<number>((_, reject) => {\n    setTimeout(() => {\n      reject(new Error('Request timed out after 3 seconds'));\n    }, 1000);\n  });\n\n  return Promise.race([requestPromise, timeoutPromise]);\n};\n\nasync function isChinaDomain(domain: string): Promise<boolean> {\n  try {\n    const [ip] = await resolve(domain);\n    return await isChinaIP(ip, domain);\n  } catch (error) {\n    logger.debug(`${domain} can't be parse!`);\n    return true;\n  }\n}\n\nasync function isChinaIP(ip: string, domain: string): Promise<boolean> {\n  try {\n    const delay = await ping(ip);\n    logger.debug(`${domain} latency is ${delay} ms`);\n    return delay > 1000;\n  } catch (error) {\n    logger.debug(`ping ${domain} failed!`);\n    return true;\n  }\n}\n\nexport { isChinaDomain, isChinaIP };\n","import chalk from 'chalk';\nimport shelljs from 'shelljs';\n\nimport { getSpinner } from '@/utils/info';\nimport { IS_WIN } from '@/utils/platform';\nimport { shellExec } from '@/utils/shell';\nimport { isChinaDomain } from '@/utils/ip';\n\nexport async function installRust() {\n  const isActions = process.env.GITHUB_ACTIONS;\n  const isInChina = await isChinaDomain('sh.rustup.rs');\n  const rustInstallScriptForMac =\n    isInChina && !isActions\n      ? 'export RUSTUP_DIST_SERVER=\"https://rsproxy.cn\" && export RUSTUP_UPDATE_ROOT=\"https://rsproxy.cn/rustup\" && curl --proto \"=https\" --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh | sh'\n      : \"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\";\n  const rustInstallScriptForWindows = 'winget install --id Rustlang.Rustup';\n\n  const spinner = getSpinner('Downloading Rust...');\n\n  try {\n    await shellExec(IS_WIN ? rustInstallScriptForWindows : rustInstallScriptForMac);\n    spinner.succeed(chalk.green('Rust installed successfully!'));\n  } catch (error) {\n    console.error('Error installing Rust:', error.message);\n    spinner.fail(chalk.red('Rust installation failed!'));\n    process.exit(1);\n  }\n}\n\nexport function checkRustInstalled() {\n  return shelljs.exec('rustc --version', { silent: true }).code === 0;\n}\n","import fs from 'fs';\n\nexport default async function combineFiles(files: string[], output: string) {\n  const contents = files.map(file => {\n    const fileContent = fs.readFileSync(file);\n    if (file.endsWith('.css')) {\n      return (\n        \"window.addEventListener('DOMContentLoaded', (_event) => { const css = `\" +\n        fileContent +\n        \"`; const style = document.createElement('style'); style.innerHTML = css; document.head.appendChild(style); });\"\n      );\n    }\n\n    return \"window.addEventListener('DOMContentLoaded', (_event) => { \" + fileContent + ' });';\n  });\n  fs.writeFileSync(output, contents.join('\\n'));\n  return files;\n}\n","import path from 'path';\nimport fsExtra from 'fs-extra';\n\nimport { npmDirectory } from '@/utils/dir';\nimport combineFiles from '@/utils/combine';\nimport logger from '@/options/logger';\nimport { PakeAppOptions, PlatformMap } from '@/types';\nimport { tauriConfigDirectory } from '@/utils/dir';\n\nexport async function mergeConfig(url: string, options: PakeAppOptions, tauriConf: any) {\n  const {\n    width,\n    height,\n    fullscreen,\n    hideTitleBar,\n    alwaysOnTop,\n    appVersion,\n    darkMode,\n    disabledWebShortcuts,\n    activationShortcut,\n    userAgent,\n    showSystemTray,\n    systemTrayIcon,\n    useLocalFile,\n    identifier,\n    name,\n    resizable = true,\n    inject,\n    proxyUrl,\n    installerLanguage,\n  } = options;\n\n  const { platform } = process;\n\n  // Set Windows parameters.\n  const tauriConfWindowOptions = {\n    width,\n    height,\n    fullscreen,\n    resizable,\n    hide_title_bar: hideTitleBar,\n    activation_shortcut: activationShortcut,\n    always_on_top: alwaysOnTop,\n    dark_mode: darkMode,\n    disabled_web_shortcuts: disabledWebShortcuts,\n  };\n  Object.assign(tauriConf.pake.windows[0], { url, ...tauriConfWindowOptions });\n\n  tauriConf.productName = name;\n  tauriConf.identifier = identifier;\n  tauriConf.version = appVersion;\n\n  if (platform == 'win32') {\n    tauriConf.bundle.windows.wix.language[0] = installerLanguage;\n  }\n\n  //Judge the type of URL, whether it is a file or a website.\n  const pathExists = await fsExtra.pathExists(url);\n  if (pathExists) {\n    logger.warn('✼ Your input might be a local file.');\n    tauriConf.pake.windows[0].url_type = 'local';\n\n    const fileName = path.basename(url);\n    const dirName = path.dirname(url);\n\n    const distDir = path.join(npmDirectory, 'dist');\n    const distBakDir = path.join(npmDirectory, 'dist_bak');\n\n    if (!useLocalFile) {\n      const urlPath = path.join(distDir, fileName);\n      await fsExtra.copy(url, urlPath);\n    } else {\n      fsExtra.moveSync(distDir, distBakDir, { overwrite: true });\n      fsExtra.copySync(dirName, distDir, { overwrite: true });\n\n      // ignore it, because about_pake.html have be erased.\n      // const filesToCopyBack = ['cli.js', 'about_pake.html'];\n      const filesToCopyBack = ['cli.js'];\n      await Promise.all(filesToCopyBack.map(file => fsExtra.copy(path.join(distBakDir, file), path.join(distDir, file))));\n    }\n\n    tauriConf.pake.windows[0].url = fileName;\n    tauriConf.pake.windows[0].url_type = 'local';\n  } else {\n    tauriConf.pake.windows[0].url_type = 'web';\n  }\n\n  const platformMap: PlatformMap = {\n    win32: 'windows',\n    linux: 'linux',\n    darwin: 'macos',\n  };\n  const currentPlatform = platformMap[platform];\n\n  if (userAgent.length > 0) {\n    tauriConf.pake.user_agent[currentPlatform] = userAgent;\n  }\n\n  tauriConf.pake.system_tray[currentPlatform] = showSystemTray;\n\n  // Processing targets are currently only open to Linux.\n  if (platform === 'linux') {\n    delete tauriConf.bundle.linux.deb.files;\n    const validTargets = ['all', 'deb', 'appimage', 'rpm'];\n    if (validTargets.includes(options.targets)) {\n      tauriConf.bundle.targets = options.targets === 'all' ? ['deb', 'appimage', 'rpm'] : [options.targets];\n    } else {\n      logger.warn(`✼ The target must be one of ${validTargets.join(', ')}, the default 'deb' will be used.`);\n    }\n  }\n\n  // Set icon.\n  const platformIconMap: PlatformMap = {\n    win32: {\n      fileExt: '.ico',\n      path: `png/${name.toLowerCase()}_256.ico`,\n      defaultIcon: 'png/icon_256.ico',\n      message: 'Windows icon must be .ico and 256x256px.',\n    },\n    linux: {\n      fileExt: '.png',\n      path: `png/${name.toLowerCase()}_512.png`,\n      defaultIcon: 'png/icon_512.png',\n      message: 'Linux icon must be .png and 512x512px.',\n    },\n    darwin: {\n      fileExt: '.icns',\n      path: `icons/${name.toLowerCase()}.icns`,\n      defaultIcon: 'icons/icon.icns',\n      message: 'macOS icon must be .icns type.',\n    },\n  };\n  const iconInfo = platformIconMap[platform];\n  const exists = await fsExtra.pathExists(options.icon);\n  if (exists) {\n    let updateIconPath = true;\n    let customIconExt = path.extname(options.icon).toLowerCase();\n\n    if (customIconExt !== iconInfo.fileExt) {\n      updateIconPath = false;\n      logger.warn(`✼ ${iconInfo.message}, but you give ${customIconExt}`);\n      tauriConf.bundle.icon = [iconInfo.defaultIcon];\n    } else {\n      const iconPath = path.join(npmDirectory, 'src-tauri/', iconInfo.path);\n      tauriConf.bundle.resources = [iconInfo.path];\n      await fsExtra.copy(options.icon, iconPath);\n    }\n\n    if (updateIconPath) {\n      tauriConf.bundle.icon = [options.icon];\n    } else {\n      logger.warn(`✼ Icon will remain as default.`);\n    }\n  } else {\n    logger.warn('✼ Custom icon path may be invalid, default icon will be used instead.');\n    tauriConf.bundle.icon = [iconInfo.defaultIcon];\n  }\n\n  // Set tray icon path.\n  let trayIconPath = platform === 'darwin' ? 'png/icon_512.png' : tauriConf.bundle.icon[0];\n  if (systemTrayIcon.length > 0) {\n    try {\n      await fsExtra.pathExists(systemTrayIcon);\n      // 需要判断图标格式，默认只支持ico和png两种\n      let iconExt = path.extname(systemTrayIcon).toLowerCase();\n      if (iconExt == '.png' || iconExt == '.ico') {\n        const trayIcoPath = path.join(npmDirectory, `src-tauri/png/${name.toLowerCase()}${iconExt}`);\n        trayIconPath = `png/${name.toLowerCase()}${iconExt}`;\n        await fsExtra.copy(systemTrayIcon, trayIcoPath);\n      } else {\n        logger.warn(`✼ System tray icon must be .ico or .png, but you provided ${iconExt}.`);\n        logger.warn(`✼ Default system tray icon will be used.`);\n      }\n    } catch {\n      logger.warn(`✼ ${systemTrayIcon} not exists!`);\n      logger.warn(`✼ Default system tray icon will remain unchanged.`);\n    }\n  }\n\n  tauriConf.app.trayIcon.iconPath = trayIconPath;\n  tauriConf.pake.system_tray_path = trayIconPath;\n\n  delete tauriConf.app.trayIcon;\n\n  const injectFilePath = path.join(npmDirectory, `src-tauri/src/inject/custom.js`);\n\n  // inject js or css files\n  if (inject?.length > 0) {\n    if (!inject.every(item => item.endsWith('.css') || item.endsWith('.js'))) {\n      logger.error('The injected file must be in either CSS or JS format.');\n      return;\n    }\n    const files = inject.map(filepath => (path.isAbsolute(filepath) ? filepath : path.join(process.cwd(), filepath)));\n    tauriConf.pake.inject = files;\n    await combineFiles(files, injectFilePath);\n  } else {\n    tauriConf.pake.inject = [];\n    await fsExtra.writeFile(injectFilePath, '');\n  }\n  tauriConf.pake.proxy_url = proxyUrl || '';\n\n  // Save config file.\n  const platformConfigPaths: PlatformMap = {\n    win32: 'tauri.windows.conf.json',\n    darwin: 'tauri.macos.conf.json',\n    linux: 'tauri.linux.conf.json',\n  };\n\n  const configPath = path.join(tauriConfigDirectory, platformConfigPaths[platform]);\n\n  const bundleConf = { bundle: tauriConf.bundle };\n  console.log('pakeConfig', tauriConf.pake);\n  await fsExtra.outputJSON(configPath, bundleConf, { spaces: 4 });\n  const pakeConfigPath = path.join(tauriConfigDirectory, 'pake.json');\n  await fsExtra.outputJSON(pakeConfigPath, tauriConf.pake, { spaces: 4 });\n\n  let tauriConf2 = JSON.parse(JSON.stringify(tauriConf));\n  delete tauriConf2.pake;\n\n  // delete tauriConf2.bundle;\n  if (process.env.NODE_ENV === 'development') {\n    tauriConf2.bundle = bundleConf.bundle;\n  }\n  const configJsonPath = path.join(tauriConfigDirectory, 'tauri.conf.json');\n  await fsExtra.outputJSON(configJsonPath, tauriConf2, { spaces: 4 });\n}\n","import path from 'path';\nimport fsExtra from 'fs-extra';\nimport chalk from 'chalk';\nimport prompts from 'prompts';\n\nimport { PakeAppOptions } from '@/types';\nimport { checkRustInstalled, installRust } from '@/helpers/rust';\nimport { mergeConfig } from '@/helpers/merge';\nimport tauriConfig from '@/helpers/tauriConfig';\nimport { npmDirectory } from '@/utils/dir';\nimport { getSpinner } from '@/utils/info';\nimport { shellExec } from '@/utils/shell';\nimport { isChinaDomain } from '@/utils/ip';\nimport { IS_MAC } from '@/utils/platform';\nimport logger from '@/options/logger';\n\nexport default abstract class BaseBuilder {\n  protected options: PakeAppOptions;\n\n  protected constructor(options: PakeAppOptions) {\n    this.options = options;\n  }\n\n  async prepare() {\n    const tauriSrcPath = path.join(npmDirectory, 'src-tauri');\n    const tauriTargetPath = path.join(tauriSrcPath, 'target');\n    const tauriTargetPathExists = await fsExtra.pathExists(tauriTargetPath);\n\n    if (!IS_MAC && !tauriTargetPathExists) {\n      logger.warn('✼ The first use requires installing system dependencies.');\n      logger.warn('✼ See more in https://tauri.app/start/prerequisites/.');\n    }\n\n    if (!checkRustInstalled()) {\n      const res = await prompts({\n        type: 'confirm',\n        message: 'Rust not detected. Install now?',\n        name: 'value',\n      });\n\n      if (res.value) {\n        await installRust();\n      } else {\n        logger.error('✕ Rust required to package your webapp.');\n        process.exit(0);\n      }\n    }\n\n    const isChina = await isChinaDomain('www.npmjs.com');\n    const spinner = getSpinner('Installing package...');\n    const rustProjectDir = path.join(tauriSrcPath, '.cargo');\n    const projectConf = path.join(rustProjectDir, 'config.toml');\n    await fsExtra.ensureDir(rustProjectDir);\n\n    if (isChina) {\n      logger.info('✺ Located in China, using npm/rsProxy CN mirror.');\n      const projectCnConf = path.join(tauriSrcPath, 'rust_proxy.toml');\n      await fsExtra.copy(projectCnConf, projectConf);\n      await shellExec(`cd \"${npmDirectory}\" && npm install --registry=https://registry.npmmirror.com`);\n    } else {\n      await shellExec(`cd \"${npmDirectory}\" && npm install`);\n    }\n    spinner.succeed(chalk.green('Package installed!'));\n    if (!tauriTargetPathExists) {\n      logger.warn('✼ The first packaging may be slow, please be patient and wait, it will be faster afterwards.');\n    }\n  }\n\n  async build(url: string) {\n    await this.buildAndCopy(url, this.options.targets);\n  }\n\n  async start(url: string) {\n    await mergeConfig(url, this.options, tauriConfig);\n  }\n\n  async buildAndCopy(url: string, target: string) {\n    const { name } = this.options;\n    await mergeConfig(url, this.options, tauriConfig);\n\n    // Build app\n    const spinner = getSpinner('Building app...');\n    setTimeout(() => spinner.stop(), 3000);\n    await shellExec(`cd \"${npmDirectory}\" && ${this.getBuildCommand()}`);\n\n    // Copy app\n    const fileName = this.getFileName();\n    const fileType = this.getFileType(target);\n    const appPath = this.getBuildAppPath(npmDirectory, fileName, fileType);\n    const distPath = path.resolve(`${name}.${fileType}`);\n    await fsExtra.copy(appPath, distPath);\n    await fsExtra.remove(appPath);\n    logger.success('✔ Build success!');\n    logger.success('✔ App installer located in', distPath);\n  }\n\n  protected getFileType(target: string): string {\n    return target;\n  }\n\n  abstract getFileName(): string;\n\n  protected getBuildCommand(): string {\n    // the debug option should support `--debug` and `--release`\n    return this.options.debug ? 'npm run build:debug' : 'npm run build';\n  }\n\n  protected getBasePath(): string {\n    const basePath = this.options.debug ? 'debug' : 'release';\n    return `src-tauri/target/${basePath}/bundle/`;\n  }\n\n  protected getBuildAppPath(npmDirectory: string, fileName: string, fileType: string): string {\n    return path.join(npmDirectory, this.getBasePath(), fileType.toLowerCase(), `${fileName}.${fileType}`);\n  }\n}\n","import tauriConfig from '@/helpers/tauriConfig';\nimport { PakeAppOptions } from '@/types';\nimport BaseBuilder from './BaseBuilder';\n\nexport default class MacBuilder extends BaseBuilder {\n  constructor(options: PakeAppOptions) {\n    super(options);\n    this.options.targets = 'dmg';\n  }\n\n  getFileName(): string {\n    const { name } = this.options;\n    let arch: string;\n    if (this.options.multiArch) {\n      arch = 'universal';\n    } else {\n      arch = process.arch === 'arm64' ? 'aarch64' : process.arch;\n    }\n    return `${name}_${tauriConfig.version}_${arch}`;\n  }\n\n  protected getBuildCommand(): string {\n    return this.options.multiArch ? 'npm run build:mac' : super.getBuildCommand();\n  }\n\n  protected getBasePath(): string {\n    return this.options.multiArch\n      ? 'src-tauri/target/universal-apple-darwin/release/bundle'\n      : super.getBasePath();\n  }\n}\n","import BaseBuilder from './BaseBuilder';\nimport { PakeAppOptions } from '@/types';\nimport tauriConfig from '@/helpers/tauriConfig';\n\nexport default class WinBuilder extends BaseBuilder {\n  constructor(options: PakeAppOptions) {\n    super(options);\n    this.options.targets = 'msi';\n  }\n\n  getFileName(): string {\n    const { name } = this.options;\n    const { arch } = process;\n    const language = tauriConfig.bundle.windows.wix.language[0];\n    return `${name}_${tauriConfig.version}_${arch}_${language}`;\n  }\n}\n","import BaseBuilder from './BaseBuilder';\nimport { PakeAppOptions } from '@/types';\nimport tauriConfig from '@/helpers/tauriConfig';\n\nexport default class LinuxBuilder extends BaseBuilder {\n  constructor(options: PakeAppOptions) {\n    super(options);\n  }\n\n  getFileName(): string {\n    const { name } = this.options;\n    const arch = process.arch === 'x64' ? 'amd64' : process.arch;\n    return `${name}_${tauriConfig.version}_${arch}`;\n  }\n\n  // Customize it, considering that there are all targets.\n  async build(url: string) {\n    const targetTypes = ['deb', 'appimage'];\n    for (const target of targetTypes) {\n      if (this.options.targets === target || this.options.targets === 'all') {\n        await this.buildAndCopy(url, target);\n      }\n    }\n  }\n\n  protected getFileType(target: string): string {\n    if (target === 'appimage') {\n      return 'AppImage';\n    }\n    return super.getFileType(target);\n  }\n}\n","import BaseBuilder from './BaseBuilder';\nimport MacBuilder from './MacBuilder';\nimport WinBuilder from './WinBuilder';\nimport LinuxBuilder from './LinuxBuilder';\nimport { PakeAppOptions } from '@/types';\n\nconst { platform } = process;\n\nconst buildersMap: Record<string, new (options: PakeAppOptions) => BaseBuilder> = {\n  darwin: MacBuilder,\n  win32: WinBuilder,\n  linux: LinuxBuilder,\n};\n\nexport default class BuilderProvider {\n  static create(options: PakeAppOptions): BaseBuilder {\n    const Builder = buildersMap[platform];\n    if (!Builder) {\n      throw new Error('The current system is not supported!');\n    }\n    return new Builder(options);\n  }\n}\n","import log from 'loglevel';\nimport { DEFAULT_DEV_PAKE_OPTIONS } from './defaults';\nimport handleInputOptions from './options/index';\nimport BuilderProvider from './builders/BuilderProvider';\n\nasync function startBuild() {\n  log.setDefaultLevel('debug');\n\n  const appOptions = await handleInputOptions(DEFAULT_DEV_PAKE_OPTIONS, DEFAULT_DEV_PAKE_OPTIONS.url);\n  log.debug('PakeAppOptions', appOptions);\n\n  const builder = BuilderProvider.create(appOptions);\n  await builder.prepare();\n  await builder.start(DEFAULT_DEV_PAKE_OPTIONS.url);\n}\n\nstartBuild();\n"],"names":["platform","handleInputOptions"],"mappings":"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"}